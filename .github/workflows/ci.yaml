name: CI Pipeline

on: push

jobs:
  Continous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --no-cache-dir -r requirements.txt
          pip install dvc[s3]   # or your remote type

      # - name: Pull DVC data
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: dvc pull --force

      # - name: Generate dummy inference input
      #   run: |
      #    echo '{"text": "ew david" , "character": "david"}' > data/inference_input.json

      # - name: Run DVC pipeline
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: dvc repro

      # - name: Run model tests
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: |
      #     python -m unittest tests/test_model.py

      # - name: Promote model to production
      #   if: success()
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: python scripts/promote_model.py

      # - name: Run Flask app tests
      #   if: success()
      #   env:
      #     CAPSTONE_TEST: ${{ secrets.CAPSTONE_TEST }}
      #   run: python -m unittest tests/test_app.py

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Clean up Docker
        run: |
          docker system prune -af || true


      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker build --pull -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .  
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Continuous-Deployment:
    needs: Continous-Integration
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Run Docker Image to serve users
        run: |
          docker run -d -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" -e CAPSTONE_TEST="${{ secrets.CAPSTONE_TEST }}" -p 5001:5001 "${{ steps.login-ecr.outputs.registry }}"/"${{ secrets.ECR_REPO }}":latest

        # docker run -d -e CAPSTONE_TEST="${{ secrets.CAPSTONE_TEST }}" -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" -p 5001:5001 "${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:latest"